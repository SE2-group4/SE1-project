package it.polito.ezgas.entity;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

@DataJpaTest
public class UserTests {
	private User user;
	
	@BeforeEach
	public void setUp() throws Exception {
		this.user = new User("Aldo", "buonaquestacadrega", "aldo.baglio@agg.it", 3);
		// userId: autogenerated, admin: cannot be setted by the constructor
		// admin: cannot be setted by the constructor
	}
	
	@Test
	public void testGetUserId_ShouldReturnUserId() {
		Integer userId = this.user.getUserId();
		assertNotNull(userId);
		assertTrue(userId.intValue() > 0); // userId: autogenerated by Spring
	}

	@Test
	public void testSetUserId_ShouldSetUserId() {
		Integer newId = 42;
		this.user.setUserId(newId);
		Integer returnedId = this.user.getUserId();
		assertNotNull(returnedId);
		assertEquals(newId, returnedId);

		newId = -15;
		this.user.setUserId(newId);
		// assertTrue(this.user.getUserId() > 0); // omission in requirements
	}

	@Test
	public void testGetUserName_ShouldReturnUserName() {
		String returnedUserName = this.user.getUserName();	
		assertNotNull(returnedUserName);
		assertEquals(returnedUserName.trim(), returnedUserName, "Strings must be trimmed!");
		assertEquals("Aldo", returnedUserName.trim());
	}

	@Test
	public void testSetUserName_ShouldSetUserName() {
		String newUserName = "  Aldo  ";
		this.user.setUserName(newUserName);
		String returnedUserName = this.user.getUserName();
		assertNotNull(returnedUserName);
		assertEquals(returnedUserName.trim(), returnedUserName, "Strings must be trimmed!");
		assertEquals(newUserName.trim(), returnedUserName.trim());

		this.user.setUserName(null);
		// assertNotNull(this.user.getUserName()); // omission in requirements

		this.user.setUserName("");
		// assertNotEquals("", this.user.getUserName()); // omission in requirements
	}

	@Test
	public void testGetPassword_ShouldReturnPassword() {
		String password = this.user.getPassword();
		assertNotNull(password);
		assertEquals("buonaquestacadrega", password);
	}

	@Test
	public void testSetPassword_ShouldSetPassword() {
		String newPassword = "ajejebrazorf";
		this.user.setPassword(newPassword);
		String password = this.user.getPassword();
		assertNotNull(password);
		assertEquals(newPassword, password);
	}

	@Test
	public void testGetEmail_ShouldReturnEmail() {
		String returnedEmail = this.user.getEmail();	
		assertNotNull(returnedEmail);	
		assertEquals(returnedEmail.trim(), returnedEmail, "Strings must be trimmed!");
		assertEquals("aldo.baglio@agg.it", returnedEmail.trim());
	}

	@Test
	public void testSetEmail_ShouldSetEmail() {
		String newEmail = "  notAnEmail  ";
		this.user.setEmail(newEmail);

		String returnedEmail = this.user.getEmail();
		assertNotNull(returnedEmail);
		assertEquals(returnedEmail.trim(), returnedEmail, "Strings must be trimmed!");
		assertEquals(newEmail.trim(), returnedEmail.trim());
	}

	@Test
	public void testGetReputation_ShouldReturnReputation() {
		Integer reputation = this.user.getReputation();
		assertNotNull(reputation);
		assertTrue(reputation.intValue() == 3);
	}
	
	@Test
	public void testSetReputation_ShouldSetReputation() {
		this.user.setReputation(999);
		Integer reputation = this.user.getReputation();
		assertNotNull(reputation);
		assertTrue(reputation.intValue() >= -5 && reputation.intValue() <= +5,
				"Trust level must by in [-5, +5]!");
	}

	@Test
	public void testGetAdmin_ShouldReturnAdmin() {
		Boolean admin = this.user.getAdmin();
		assertNotNull(admin);
		assertEquals(false, admin.booleanValue());
	}

	@Test
	public void testSetAdmin_ShouldSetAdmin() {
		this.user.setAdmin(true);
		Boolean admin = this.user.getAdmin();
		assertNotNull(admin);
		assertEquals(true, admin.booleanValue());
	}
	
}
