package it.polito.ezgas.user;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import it.polito.ezgas.entity.User;

public class UserTests {
	private User user;
	
	@BeforeEach
	public void setUp() throws Exception {
		this.user = new User("Aldo", "buonaquestacadrega", "aldo.baglio@agg.it", 3, false);
	}
	
	@Test
	public void testGetUserId_ShouldReturnUserId() {
		assertTrue(this.user.getUserId() > 0); // userId: autogenerated by Spring
	}

	@Test
	public void testSetUserId_ShouldSetUserId() {
		Integer newId = 42;
		this.user.setUserId(newId);
		assertEquals(this.user.getUserId(), newId);

		newId = -15;
		this.user.setUserId(newId);
		// assertTrue(this.user.getUserId() > 0); // omission in requirements
	}

	@Test
	public void testGetUserName_ShouldReturnUserName() {
		String returnedUserName = this.user.getUserName();		
		assertEquals("Strings must be trimmed!", returnedUserName, returnedUserName.trim());
		assertEquals(returnedUserName.trim(), "Aldo");
	}

	@Test
	public void testSetUserName_ShouldSetUserName() {
		String newUserName = "  Aldo  ";
		this.user.setUserName(newUserName);
		String returnedUserName = this.user.getUserName();
		assertEquals("Strings must be trimmed!", returnedUserName, returnedUserName.trim());
		assertEquals(newUserName.trim(), returnedUserName.trim());

		this.user.setUserName(null);
		// assertNotNull(this.user.getUserName()); // omission in requirements

		this.user.setUserName("");
		// assertNotEquals(this.user.getUserName(), ""); // omission in requirements
	}

	@Test
	public void testGetPassword_ShouldReturnPassword() {
		assertTrue(this.user.getPassword().equals("buonaquestacadrega"));
	}

	@Test
	public void testSetPassword_ShouldSetPassword() {
		String newPassword = "ajejebrazorf";
		this.user.setPassword(newPassword);
		assertTrue(this.user.getPassword().equals(newPassword));
	}

	@Test
	public void testGetEmail_ShouldReturnEmail() {
		String returnedEmail = this.user.getEmail();		
		assertEquals("Strings must be trimmed!", returnedEmail, returnedEmail.trim());
		assertEquals(returnedEmail.trim(), "aldo.baglio@agg.it");
	}

	@Test
	public void testSetEmail_ShouldSetEmail() {
		String newEmail = "  notAnEmail  ";
		this.user.setEmail(newEmail);

		String returnedEmail = this.user.getEmail();
		assertEquals("Strings must be trimmed!", returnedEmail, returnedEmail.trim());
		assertEquals(newEmail.trim(), returnedEmail.trim());
	}

	@Test
	public void testGetReputation_ShouldReturnReputation() {
		assertTrue(this.user.getReputation() == 3);
	}
	
	@Test
	public void testSetReputation_ShouldSetReputation() {
		this.user.setReputation(999);
		assertTrue("Trust level must by in [-5, +5]!", this.user.getReputation() >= -5 && this.user.getReputation() <= +5);
	}

	@Test
	public void testGetAdmin_ShouldReturnAdmin() {
		assertTrue(this.user.getAdmin() == false);
	}

	@Test
	public void testSetAdmin_ShouldSetAdmin() {
		this.user.setAdmin(true);
		assertTrue(this.user.getAdmin() == true);
	}
	
}
